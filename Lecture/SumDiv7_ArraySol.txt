package com.example.lesperan.testbed.chapter5;

import java.util.Date;
import java.util.Random;

/**
 * Created by H. Roumani on 2/27/2017.
 * Fix added by Y.L. 8/7/2019
 * Some documentation added by YL.
 *
 * If we pick an integer in [1,1M] randomly, how likely is it to get one whose digit sum is divisible by 7?
 *
 * Compute the probability by sampling 10% of those integers and store the sample in a collection.
 *
 * Here we use an array to represent the collection.
 */
public class SumDiv7_Array
{
    private int population;  // population size
    private int sample;  // sample size
    private Random rng;
    private int count;  // count of samples meeting criterion
    private int[] bag;  // random sample set

    public SumDiv7_Array(int population, double samplingPercentage)
    {
        this.population = population;
        this.sample = (int) (population * samplingPercentage);
        this.rng = new Random();
        this.count = 0;
        this.bag = new int[this.sample + 1]; // create array
    }

    public void simulate()
    {
        for (int i = 0; i < this.sample; i++)
        {
            // pick a distinct int from population
            // if it fits the criterion, count it
            int n = pickDistinct(i);
            this.bag[i] = n;  // store sample in array
            int sum = digitSum(n);
            if (sum % 7 == 0) this.count++;  // if it meets criterion, count it
        }
    }

    private int pickDistinct(int sampleCount)  // added sampleCount
    {
        int n;
        do
        {
            n = 1 + rng.nextInt(this.population);
        } while (contains(this.bag, sampleCount, n));
        return n;
    }

    // return true or false depending on whether x is in ar
    private boolean contains(int[] ar, int size, int x)
    {
        boolean found = false;
        for (int i = 0; (i < size) && !found; i++)
        {
            found = (ar[i] == x);
        }
        return found;
    }

    // return the sum of the digits of x
    private int digitSum(int x)
    {
        int sum = 0;
        for (int r = x; r != 0; r = r / 10)
        {
            int digit = r % 10;
            sum += digit;
        }
        return sum;
    }

    public static void main(String[] args)
    {
        long start = (new Date()).getTime();

        SumDiv7_Array var = new SumDiv7_Array(1000000,
                .1);
        var.simulate();
        System.out.println("Probalility of meeting criterion is "
                + var.count / (double) var.sample);
        System.out.println("Sample is ");
        for (int i = 0; i < var.count; i++)
        {
            System.out.print(var.bag[i] + " ");
        }

        long finish = (new Date()).getTime();

        System.out.println("\nRunning time was " + (finish-start) + " ms.");


    }
}