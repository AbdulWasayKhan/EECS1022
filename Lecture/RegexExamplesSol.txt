package com.example.lesperan.testbed.chapter4;

import java.util.regex.*;

public class RegexExamples {

    public static boolean hasPostalCode(String s) {
        String regex = "[A-Za-z]\\d[A-Za-z][ ]?\\d[A-Za-z]\\d";
        Pattern myPattern = Pattern.compile(regex);
        Matcher myMatcher = myPattern.matcher(s);
        return myMatcher.find();
    }

    public static void printAllPostalCodes(String s) {
        String regex = "[A-Za-z]\\d[A-Za-z][ ]?\\d[A-Za-z]\\d";
        Pattern myPattern = Pattern.compile(regex);
        Matcher myMatcher = myPattern.matcher(s);
        for (; myMatcher.find(); ) {
            System.out.println(s.substring(myMatcher.start(), myMatcher.end()));
        }
    }

    public static void printAllDigitsInAllPostalCodes(String s) {
        String regex = "[A-Za-z](\\d)[A-Za-z][ ]?(\\d)[A-Za-z](\\d)";
        Pattern myPattern = Pattern.compile(regex);
        Matcher myMatcher = myPattern.matcher(s);
        for (; myMatcher.find(); ) {
            for (int grp = 1; grp <= myMatcher.groupCount(); grp++) {
                System.out.println(myMatcher.group(grp));
                System.out.println(s.substring(myMatcher.start(), myMatcher.end()));
            }
        }
    }

    public static void printAllPhoneNumbers(String s) {
        String regex = "[1-9]\\d\\d\\-\\d\\d\\d\\d";
        Pattern myPattern = Pattern.compile(regex);
        Matcher myMatcher = myPattern.matcher(s);
        for (; myMatcher.find(); ) {
            System.out.println(s.substring(myMatcher.start(), myMatcher.end()));
        }
    }

    public static boolean hasHeight(String s) {
        String regex = "\\d\'(\\d|1[01])\\\"";
        Pattern myPattern = Pattern.compile(regex);
        Matcher myMatcher = myPattern.matcher(s);
        return myMatcher.find();
    }

    public static String largestWordIn(String s) {
        String regex = "\\s+";
        String[] words = s.split(regex);
        String result = "";
        for (int i = 0; i < words.length; i++) {
            System.out.println(words[i]); // uncomment to print all words found
            if (words[i].length() > result.length()) {
                result = words[i];
            }
        }
        return result;
    }

    public static boolean isValidQueryString(String s) {
        String regex = "^\\?[a-zA-Z]+=[^\\&]+(\\&\\&[a-zA-Z]+=[^\\&]+)*$";
        Pattern myPattern = Pattern.compile(regex);
        Matcher myMatcher = myPattern.matcher(s);
        return myMatcher.find();
    }

    public static boolean isValidDNA(String s) {
        String regex = "^ATG([ACGT][ACGT][ACGT])*$";
        Pattern myPattern = Pattern.compile(regex);
        Matcher myMatcher = myPattern.matcher(s);
        return myMatcher.find();
    }

    public static String mostFrequentAminoAcid(String s){
        String mostFreqAA = "ATG";
        int mostFreqAACount = 1;
        for (int i = 3; i < s.length(); i += 3){
            if (s.substring(i,i+3).equals(mostFreqAA)){
                mostFreqAACount++;
            }
        }
        for (int i = 3; i < s.length(); i += 3){
            String currentAA = s.substring(i,i+3);
            int currentAACount = 0;
            for (int j = 0; j < s.length(); j += 3){
                if (s.substring(j,j+3).equals(currentAA)){
                    currentAACount++;
                }
            }
            if (currentAACount > mostFreqAACount){
                mostFreqAA = currentAA;
                mostFreqAACount = currentAACount;
            }
        }
        return mostFreqAA;
    }

    public static void main(String[] args) {
        String s1 = "York University EECS is at M3J 1P3.  Their number is 736-5053.  Their fax number is 736-5872.  Glendon College is located at m4n3m6.";
        System.out.println("s1 is \"" + s1 + "\"");
        System.out.println("\nhasPostalCode(s1) returns " + hasPostalCode(s1));
        System.out.println("\nCalling printAllPostalCodes(s1) produces");
        printAllPostalCodes(s1);
        System.out.println("\nCalling printAllDigitsInAllPostalCodes(s1) produces");
        printAllDigitsInAllPostalCodes(s1);
        System.out.println("\nCalling printAllPhoneNumbers(s1) produces");
        printAllPhoneNumbers(s1);
        System.out.println("\nhasHeight(\"I an 5'6\".\") returns " + hasHeight("I an 5'6\"."));
        System.out.println("hasHeight(\"I an tall.\") returns " + hasHeight("I an tall."));
        System.out.println("\nlargestWordIn(s1) returns " + largestWordIn(s1));
        System.out.println("\nisValidQueryString(\"?abc=3adef5&&ghi=456\") returns " + isValidQueryString("?abc=3adef5&&ghi=456"));
        System.out.println("isValidQueryString(\"?abc=3adef5&&ghi=\") returns " + isValidQueryString("?abc=3adef5&&ghi="));
        System.out.println("\nisValidDNA(\"ATGGAT\") returns " + isValidDNA("ATGGAT"));
        System.out.println("isValidDNA(\"ATGGA\") returns " + isValidDNA("ATGGA"));
        System.out.println("\nmostFrequentAminoAcid(\"ATGGATAGTGAT\") returns " + mostFrequentAminoAcid("ATGGATAGTGAT"));
    }
}
